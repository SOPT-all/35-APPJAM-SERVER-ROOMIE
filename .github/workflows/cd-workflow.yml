name: CD with Gradle and Docker for Producer and Consumer

on:
  push:
    branches:
      - 'main'
      - 'dev'
  pull_request:
    branches:
      - 'main'
      - 'dev'

permissions:
  contents: read

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest

    steps:
      # ÏΩîÎìú Ï≤¥ÌÅ¨ÏïÑÏõÉ
      - uses: actions/checkout@v4

      # JDK ÏÑ§Ï†ï
      - name: ‚òïÔ∏è Set up JDK 17
        uses: actions/setup-java@v3
        with:
          java-version: '17'
          distribution: 'temurin'

      # Gradlew Ïã§Ìñâ Í∂åÌïú Î∂ÄÏó¨
      - name: Grant execute permission for Gradlew
        run: chmod +x ./gradlew

      # Producer ÎπåÎìú
      - name: üêò Build Producer with Gradle
        run: ./gradlew :producer:clean :producer:build -x test --stacktrace

      # Consumer ÎπåÎìú
      - name: üêò Build Consumer with Gradle
        run: ./gradlew :consumer:clean :consumer:build -x test --stacktrace

      # Docker ÎπåÎìú Î∞è Ìë∏Ïãú - Producer
      - name: üí£ Build and Push Producer Docker Image
        run: |
          docker login -u ${{ secrets.DOCKER_USERNAME }} -p ${{ secrets.DOCKER_PASSWORD }}
          docker build -f ./producer/Dockerfile -t ${{ secrets.DOCKER_USERNAME }}/roomie-producer:latest ./producer
          docker push ${{ secrets.DOCKER_USERNAME }}/roomie-producer:latest

      # Docker ÎπåÎìú Î∞è Ìë∏Ïãú - Consumer
      - name: üí£ Build and Push Consumer Docker Image
        run: |
          docker login -u ${{ secrets.DOCKER_USERNAME }} -p ${{ secrets.DOCKER_PASSWORD }}
          docker build -f ./consumer/Dockerfile -t ${{ secrets.DOCKER_USERNAME }}/roomie-consumer:latest ./consumer
          docker push ${{ secrets.DOCKER_USERNAME }}/roomie-consumer:latest

      # EC2Î°ú Î∞∞Ìè¨
      - name: üöÄ Deploy Producer and Consumer to EC2
        uses: appleboy/ssh-action@master
        with:
          host: ${{ secrets.EC2_HOST }}
          username: ${{ secrets.EC2_USERNAME }}
          key: ${{ secrets.EC2_KEY }}
          port: ${{ secrets.EC2_PORT }}
          script: |
            echo "‚úã Stopping and removing existing containers"
            sudo docker stop producer || true
            sudo docker stop consumer || true
            sudo docker rm producer || true
            sudo docker rm consumer || true

            echo "üöÄ Pulling latest Docker images"
            sudo docker pull ${{ secrets.DOCKER_USERNAME }}/roomie-producer:latest
            sudo docker pull ${{ secrets.DOCKER_USERNAME }}/roomie-consumer:latest

            echo "üå± Starting Producer container"
            sudo docker run -d --name producer -p 8080:8080 \
              -e SPRING_DATASOURCE_DRIVER_CLASS_NAME="${{ secrets.SPRING_DATASOURCE_DRIVER_CLASS_NAME }}" \
              -e SPRING_DATASOURCE_USERNAME="${{ secrets.SPRING_DATASOURCE_USERNAME }}" \
              -e SPRING_DATASOURCE_PASSWORD="${{ secrets.SPRING_DATASOURCE_PASSWORD }}" \
              -e NAVER_CLIENT_ID="${{ secrets.NAVER_CLIENT_ID }}" \
              -e NAVER_CLIENT_SECRET="${{ secrets.NAVER_CLIENT_SECRET }}" \
              -e NAVER_LOCATION_SEARCH_URL="${{ secrets.NAVER_LOCATION_SEARCH_URL }}" \
              ${{ secrets.DOCKER_USERNAME }}/roomie-producer:latest

            echo "üå± Starting Consumer container"
            sudo docker run -d --name consumer -p 8081:8080 \
              -e SPRING_DATASOURCE_DRIVER_CLASS_NAME="${{ secrets.SPRING_DATASOURCE_DRIVER_CLASS_NAME }}" \
              -e SPRING_DATASOURCE_USERNAME="${{ secrets.SPRING_DATASOURCE_USERNAME }}" \
              -e SPRING_DATASOURCE_PASSWORD="${{ secrets.SPRING_DATASOURCE_PASSWORD }}" \
              -e NAVER_CLIENT_ID="${{ secrets.NAVER_CLIENT_ID }}" \
              -e NAVER_CLIENT_SECRET="${{ secrets.NAVER_CLIENT_SECRET }}" \
              -e NAVER_LOCATION_SEARCH_URL="${{ secrets.NAVER_LOCATION_SEARCH_URL }}" \
              ${{ secrets.DOCKER_USERNAME }}/roomie-consumer:latest

            echo "üìú Showing logs of the running containers"
            sudo docker logs producer
            sudo docker logs consumer

            echo "üöΩ Cleaning up unused Docker images"
            sudo docker image prune -f