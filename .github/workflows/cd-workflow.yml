name: CD with Gradle and Docker for Producer and Consumer

on:
  push:
    branches:
      - 'main'
      - 'dev'
  pull_request:
    branches:
      - 'main'
      - 'dev'

permissions:
  contents: read

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v4

      - name: ☕️ Set up JDK 17
        uses: actions/setup-java@v3
        with:
          java-version: '17'
          distribution: 'temurin'

      - name: Grant execute permission for Gradlew
        run: chmod +x ./gradlew

      - name: 🐘 Build Producer with Gradle
        run: ./gradlew :producer:clean :producer:build -x test --stacktrace

      - name: 🐘 Build Consumer with Gradle
        run: ./gradlew :consumer:clean :consumer:build -x test --stacktrace

      - name: 💣 Build and Push Docker Images
        run: |
          docker login -u ${{ secrets.DOCKER_USERNAME }} -p ${{ secrets.DOCKER_PASSWORD }}
          docker build -f ./producer/Dockerfile -t ${{ secrets.DOCKER_USERNAME }}/roomie-producer:latest ./producer
          docker build -f ./consumer/Dockerfile -t ${{ secrets.DOCKER_USERNAME }}/roomie-consumer:latest ./consumer
          docker push ${{ secrets.DOCKER_USERNAME }}/roomie-producer:latest
          docker push ${{ secrets.DOCKER_USERNAME }}/roomie-consumer:latest

      - name: 🚀 Deploy with Docker Compose
        uses: appleboy/ssh-action@master
        with:
          host: ${{ secrets.EC2_HOST }}
          username: ${{ secrets.EC2_USERNAME }}
          key: ${{ secrets.EC2_KEY }}
          port: ${{ secrets.EC2_PORT }}
          script: |
            echo "Uploading docker-compose.yml and other files to EC2"

            # .pem 키를 파일로 저장
            echo "${{ secrets.EC2_KEY }}" > /tmp/Roomie.pem
            chmod 600 /tmp/Roomie.pem

            # Host Key 검증 비활성화 및 파일 전송
            scp -o StrictHostKeyChecking=no -i /tmp/Roomie.pem docker-compose.yml ${{ secrets.EC2_USERNAME }}@${{ secrets.EC2_HOST }}:/home/ubuntu/deployment/

            # EC2에 접속하여 작업 수행
            ssh -o StrictHostKeyChecking=no -i /tmp/Roomie.pem ${{ secrets.EC2_USERNAME }}@${{ secrets.EC2_HOST }} << 'EOF'
              # 디렉토리 준비
              mkdir -p /home/ubuntu/deployment
              cd /home/ubuntu/deployment

              # docker-compose.yml 확인
              if [ ! -f "docker-compose.yml" ]; then
                echo "Error: docker-compose.yml not found in /home/ubuntu/deployment"
                exit 1
              fi

              echo "Writing environment variables to .env"
              echo "SPRING_DATASOURCE_DRIVER_CLASS_NAME=${{ secrets.SPRING_DATASOURCE_DRIVER_CLASS_NAME }}" > .env
              echo "SPRING_DATASOURCE_PASSWORD=${{ secrets.SPRING_DATASOURCE_PASSWORD }}" >> .env
              echo "SPRING_DATASOURCE_USERNAME=${{ secrets.SPRING_DATASOURCE_USERNAME }}" >> .env
              echo "NAVER_CLIENT_ID=${{ secrets.NAVER_CLIENT_ID }}" >> .env
              echo "NAVER_CLIENT_SECRET=${{ secrets.NAVER_CLIENT_SECRET }}" >> .env
              echo "NAVER_LOCATION_SEARCH_URL=${{ secrets.NAVER_LOCATION_SEARCH_URL }}" >> .env

              echo "Bringing up Docker Compose services"
              sudo docker compose down || true
              sudo docker compose pull
              sudo docker compose up -d
              sudo docker image prune -f
            EOF